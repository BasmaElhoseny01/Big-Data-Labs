#clean environment and remove all variables in the global environment.
rm(list=ls())
#clean environment and remove all variables in the global environment.
rm(list=ls())
#display work items
ls()
#get working directory
getwd()
#get working directory
getwd()
# 1. Importing Dataset into DF
#from csv file
dfcsv <- read.csv("titanic.csv",header = TRUE)
dfcsv
# Dim for the dataset
dim(dfcsv)
# Structure for the dF
str(dfcsv)
head(dfcsv)
tail(dfcsv)
# Structure for the dF
str(dfcsv)
head(dfcsv)
tail(dfcsv)
#
summary(dfcsv)
# Summary for age only
summary(dfcsv$Age)
summary(dfcsv$Age)($'1st Qu.')
summary(dfcsv$Age)$'1st Qu.'
summary(dfcsv$Age)$'1st Qu.'
summary(dfcsv$Age)$'Min'
summary(dfcsv$Age)$'Min.'
summary(dfcsv$Age)$'1st Qu.'
summary(dfcsv$Age)["1st Qu.", ]
summary(dfcsv$Age)["1st Qu."]
# Getting third Quartile
summary(dfcsv$Age)["3rd Qu."]
dfcsv$Age
print(is.na(dfcsv$Age))
print(anyNA(dfcsv$Age))
class(dfcsv$Embarked)
# No.5
# Remove Rows with Age value be NA
dfcsv[!is.na(dfcsv$Age), ]
dim(dfcsv)
# No.5
# Remove Rows with Age value be NA
dfcsv[!is.na(dfcsv$Age), ]
dim(dfcsv)
# No.5
# Remove Rows with Age value be NA
x=dfcsv[!is.na(dfcsv$Age), ]
dim(dfcsv)
dim(x)
dim(dfcsv)
dim(dfcsv_clean)
# No.5
# Remove Rows with Age value be NA
dfcsv_clean=dfcsv[!is.na(dfcsv$Age), ]
dim(dfcsv)
dim(dfcsv_clean)
dim(x)
# Remove the rows containing any unexpected value in the embarked variable from the
x=dfcsv_clean[df$embarked %in% c('C','Q','S'),]
dim(x)
dim(dfcsv_clean)
# Remove the rows containing any unexpected value in the embarked variable from the
x=dfcsv_clean[df$Embarked %in% c('C','Q','S'),]
df$Embarked %in% c('C','Q','S')
dfcsv$Embarked %in% c('C','Q','S')
# Remove the rows containing any unexpected value in the embarked variable from the
x=dfcsv_clean[dfcsv_clean$Embarked %in% c('C','Q','S'),]
dim(x)
dim(dfcsv_clean)
# Remove the rows containing any unexpected value in the embarked variable from the
dfcsv_clean=dfcsv_clean[dfcsv_clean$Embarked %in% c('C','Q','S'),]
dim(dfcsv_clean)
# Count NA Ages
dfcsv[is.na(dfcsv$Age), ]
# Count NA Ages
dfcsv_clean[is.na(dfcsv$Age), ]
# Count NA Ages
dfcsv_clean[is.na(dfcsv$Age), ]
# Count NA Ages
dfcsv_clean[is.na(dfcsv_clean$Age), ]
factor(dfcsv_clean$Embarked)
print(embarked_factor)
embarked_factor=factor(dfcsv_clean$Embarked)
print(embarked_factor)
print(embarked_factor$Levels)
print(embarked_factor)
print(levels(embarked_factor))
# Remove Cols of Cabin and Ticket
x <- dfcsv_clean[, !(names(dfcsv_clean) %in% c("Cabin", "Ticket"))]
dim(x)
# Remove Cols of Cabin and Ticket
dfcsv_new <- dfcsv_clean[, !(names(dfcsv_clean) %in% c("Cabin", "Ticket"))]
dim(dfcsv_new)
View(dfcsv_new)
# No(7)
# Creating Freq table for the gender
gender_table <- table(dfcsv_new$Gender)
print(gender_table)
gender_table$male
gender_table["male"]
gender_table["female"]
male_count=gender_table["male"]
female_count=gender_table["female"]
# Draw Pie Chart
values <- c(male_count, female_count)
# Create a pie chart
pie(values)
# Create a table of counts
count_table <- table(dfcsv_new$Survived, dfcsv_new$Gender)
# Plot the counts
barplot(count_table, beside = TRUE, col = c("lightblue", "lightgreen"), legend = TRUE)
# Plot a pie chart showing the number of males and females who survived only.
pie(c(count_table[1]["female"],count_table[1]["female"]))
survived_table <- table(survived_data$Gender)
# Plot a pie chart showing the number of males and females who survived only.
# Filter the data for individuals who survived
survived_data <- subset(dfcsv_new, Survived == 1)
survived_table <- table(survived_data$Gender)
print(survived_table)
pie(survived_table)
# Example data
gender <- c("Male", "Female")
counts <- c(survived_table["male"],survived_table['female'])
# Create a bar plot
barplot(counts, names.arg = gender,
main = "Counts by Gender",
xlab = "Gender",
ylab = "Count",
col = "skyblue",
ylim = c(0, max(counts) * 1.2),
beside = TRUE)
# Calculate the density estimate
density_age <- density(age)
# Calculate the density estimate
density_age <- density(age)
# Calculate the density estimate
density_age <- density(dfcsv_new$Age)
# Plot the density distribution
plot(density_age, main = "Density Distribution of Age", xlab = "Age", ylab = "Density")
# Export
write.csv(dfcsv_new[,c("Name","Survived")], file = "output.csv", row.names = FALSE)
