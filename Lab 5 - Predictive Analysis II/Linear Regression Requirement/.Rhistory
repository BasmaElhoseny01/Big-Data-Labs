#setwd("~/LAB")
rm(list=ls())
#setwd("~/LAB")
rm(list=ls())
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
rm(list=ls()) # clear the R environment by removing all objects from the workspace
n <- 100;
rm(list=ls()) # clear the R environment by removing all objects from the workspace
n <- 100;
n <- 100
n <- 100; nosim <- 1000
x1 <- rnorm(n);  x2<-rnorm(n);
rm(list=ls()) # clear the R environment by removing all objects from the workspace
n <- 100
nosim <- 1000
x1 <- rnorm(n)
x2<-rnorm(n)
y <- x1 + rnorm(n, sd = .3)
fit1<-lm(y~x1)
fit1<-lm(y~x1)
summary(fit1)
plot(x1, fit1$residuals); abline(a=0,b=0,col="red")
fit2<-lm(y~x2)
summary(fit2)
plot(x2,fit2$residuals); abline(a=0,b=0,col="red")
plot(x1, fit1$residuals); abline(a=0,b=0,col="red")
plot(x2,fit2$residuals); abline(a=0,b=0,col="red")
fit1<-lm(y~x1)
summary(fit1)
plot(x1, fit1$residuals); abline(a=0,b=0,col="green")
fit1<-lm(y~x1)
summary(fit1)
plot(x1, fit1$residuals); abline(a=0,b=0,col="red")
fit1<-lm(y~x1-1)
summary(fit1)
plot(x1, fit1$residuals); abline(a=0,b=0,col="green")
fit1<-lm(y~x1-1)
summary(fit1)
plot(x1, fit1$residuals); abline(a=0,b=0,col="green")
plot(x1, fit1$residuals); abline(a=0,b=0,col="red")
fit1<-lm(y~x1)
summary(fit1)
summary(fit1)
fit1<-lm(y~x1)
summary(fit1)
fit1<-lm(y~x1-1)
summary(fit1)
n <- 100; nosim <- 1000
x1 <- rnorm(n);
x2 <- rnorm(n);
x3 <- rnorm(n);
y <- x1 + x2+ rnorm(n, sd = .3)
fit1<-lm(y~x1)
fit2<-lm(y~x2)
fit3<-lm(y~x3)
fit12<-lm(y~x1+x2)
fit13<-lm(y~x1+x3)
fit123<-lm(y~x1+x2+x3)
# Data exploration
pairs(y~x1+x2+x3)
# Model Evaluation
summary(fit1)
summary(fit12)
summary(fit123)
anova(fit1,fit12,fit123)
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
#(Q1) Try changing the value of standard deviation (sd) in the next command
#How do the data points change for different values of standard deviation?
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y)
#Plot it
plot (x,y,main = "Scatterplot of x and y")
#Plot it
plot (x,y,main = "y <- 5 + 6*x + rnorm(100, sd = 2)")
#Plot it
plot (x,y,main = "y y 5 + 6*x + rnorm(100, sd = 2)")
#Plot it
plot (x,y,main = "y y 5 + 6*x + rnorm(100, sd = 2)")
#(Q1) Try changing the value of standard deviation (sd) in the next command
#How do the data points change for different values of standard deviation?
y <- 5 + 6*x + rnorm(100, sd = 50)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y y 5 + 6*x + rnorm(100, sd = 50)")
#(Q1) Try changing the value of standard deviation (sd) in the next command
#How do the data points change for different values of standard deviation?
y <- 5 + 6*x + rnorm(100, sd = 0)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y y 5 + 6*x + rnorm(100, sd = 0)")
#(Q1) Try changing the value of standard deviation (sd) in the next command
#How do the data points change for different values of standard deviation?
y <- 5 + 6*x + rnorm(100, sd = -2)  # default values for rnorm (mean = 0 and sigma = 1)
#(Q1) Try changing the value of standard deviation (sd) in the next command
#How do the data points change for different values of standard deviation?
y <- 5 + 6*x + rnorm(100, sd = -1)  # default values for rnorm (mean = 0 and sigma = 1)
#(Q1) Try changing the value of standard deviation (sd) in the next command
#How do the data points change for different values of standard deviation?
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y 5 + 6*x + rnorm(100, sd = 2)")
y <- 5 + 6*x + rnorm(100, sd = 50)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y 5 + 6*x + rnorm(100, sd = 50)")
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5 + 6*x + rnorm(100, sd = 2)")
y <- 5 + 6*x + rnorm(100, sd = 50)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5 + 6*x + rnorm(100, sd = 50)")
y <- 5 + 6*x + rnorm(100, sd = 0)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5 + 6*x + rnorm(100, sd = 0)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
model2 <- lm(y_2 ~ x)
model3 <- lm(y_3 ~ x)
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5 + 6*x + rnorm(100, sd = 2)")
y_2 <- 5 + 6*x + rnorm(100, sd = 50)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y_2,main = "y=5 + 6*x + rnorm(100, sd = 50)")
y_3 <- 5 + 6*x + rnorm(100, sd = 0)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y_3,main = "y=5 + 6*x + rnorm(100, sd = 0)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
model2 <- lm(y_2 ~ x)
model3 <- lm(y_3 ~ x)
# Learn about this object by saying ?lm and str(d)
?lm
# Learn about this object by saying ?lm and str(d)
#?lm
str(model1)
#(Q2) How are the coefficients of the linear model affected by changing the value
#of standard deviation in Q1?
print(model1$coefficients)
print(model2$coefficients)
print(model3$coefficients)
y_4 <- 5 + 6*x + rnorm(100, sd = 1000)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y_2,main = "y=5 + 6*x + rnorm(100, sd = 1000)")
model4 <- lm(y_4 ~ x)
print(model4$coefficients)
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
plot(y,y, type="l",main = "Model(1)", xlab="true y", ylab="predicted y") # ploting the ideal line
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Model(1)", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Model(2)", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred_2) # plotting the predicted points
par(mfrow=c(1,1))
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
ypred_2 <- predict(model2) # use the trained model to predict the same training data
ypred_3 <- predict(model3) # use the trained model to predict the same training data
ypred_4 <- predict(model4) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Model(1)", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Model(2)", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred_2) # plotting the predicted points
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Model(3)", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred_3) # plotting the predicted points
par(mfrow=c(1,1))
plot(y,y, type="l", main = "Model(4)",xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred_4) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5 + 6*x + rnorm(100, sd = 2)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
# Compact model results
print(model1)
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Model(1)", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
print(model1)
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1) # plot one diagnostic graphs
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 50)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 50)")
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 50)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Predictions Model(2) std:50", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1,,main = "Residual Plot For Model(2) std:50") # plot one diagnostic graphs
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 0)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 50)")
y <- 5 + 6*x + rnorm(100, sd = 0)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 0)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Predictions Model(2) std:50", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
plot(y,y, type="l",main = "Predictions Model(2) std:0", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
plot(y,y, type="l",main = "Predictions Model(3) std:0", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1,,main = "Residual Plot For Model(2) std:50") # plot one diagnostic graphs
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1,,main = "Residual Plot For Model(3) std:50") # plot one diagnostic graphs
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 100)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 0)")
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 100)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Predictions Model(4) std:100", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1,,main = "Residual Plot For Model(3) std:50") # plot one diagnostic graphs
plot(model1, 1,,main = "Residual Plot For Model(4) std:100") # plot one diagnostic graphs
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=============================Part(1)=====================================
x <- runif(100, 0, 10)     # 100 draws between 0 & 10
y <- 5 + 6*x + rnorm(100, sd = 0)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 0)")
y <- 5 + 6*x + rnorm(100, sd = 2)  # default values for rnorm (mean = 0 and sigma = 1)
#Plot it
plot (x,y,main = "y=5+6*x + rnorm(100, sd = 2)")
# OLS model
# OLS : Ordinary Least Squares
model1 <- lm(y ~ x)
# Regression diagnostics --
ypred <- predict(model1) # use the trained model to predict the same training data
par(mfrow=c(1,1))
plot(y,y, type="l",main = "Predictions Model(1) std:2", xlab="true y", ylab="predicted y") # ploting the ideal line
points(y, ypred) # plotting the predicted points
# Detailed model results
d1 <- summary(model1)
print(model1)
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
# Learn about this object by saying ?summary.lm and by saying str(d)
cat("OLS gave slope of ", d1$coefficients[2,1],
"and an R-sqr of ", d1$r.squared, "\n")
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1,,main = "Residual Plot For Model(4) std:100") # plot one diagnostic graphs
#Graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model1, 1,,main = "Residual Plot For Model(1) std:2") # plot one diagnostic graphs
#========================Part(2)=====================================================
#Training a linear regression model
x1 <- runif(100)
plot(model1, 1,main = "Residual Plot For Model(1) std:2") # plot one diagnostic graphs
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#========================Part(2)=====================================================
#Training a linear regression model
x1 <- runif(100)
# introduce a slight nonlinearity
#(A)
y1 = 5 + 6*x1 + 0.1*x1*x1 + rnorm(100)
plot(x1,y1)
model <- lm(y1 ~ x1)
summary(model)
x1 <- runif(100)
#(B)
ytrue = 5 + 6*x1 + 0.1*x1*x1 + rnorm(100)  # same equation of y1 but on xtest to get true y for xtest
ypred <- predict(model, data.frame(x1))
par(mfrow=c(1,1))
plot(ytrue, ytrue, type="l", xlab="true y", ylab="predicted y")
points(ytrue, ypred)
# graphic dignostic (cont.)
par(mfrow=c(1,1)) # parameters for the next plot
plot(model, 1) # plot the diagnostic graphs
#setwd("~/LAB")
rm(list=ls()) # clear the R environment by removing all objects from the workspace
#=================================Part(3)==================================================
#(Q7) Import the dataset LungCapData.tsv. What are the variables in this dataset?
dfcsv <- read.csv("LungCapData.tsv",header = TRUE)
# Structure for the dF
str(dfcsv)
# Structure for the dF
summary(dfcsv)
